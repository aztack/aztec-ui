/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ComponentSize,
  ComponentStyle,
} from './global/typing';
import {
  IAzTreeItem,
} from './components/tree/az-tree-item';
import {
  IAzTreeItem as IAzTreeItem1,
} from './components/tree/az-tree-item';

export namespace Components {
  interface AzButton {
    'caption': string;
    'circle': boolean;
    'disabled': boolean;
    'icon': string;
    'iconPosition': string;
    'round': boolean;
    'size': ComponentSize;
    /**
    * Button type
    */
    'type': ComponentStyle;
  }
  interface AzCheckbox {
    'caption': string;
    'checked': boolean;
    'indeterminate': boolean;
  }
  interface AzColorPicker {
    'caption': string;
    'color': string;
  }
  interface AzContextMenu {
    'caption': string;
  }
  interface AzDialog {
    'caption': string;
    'fixed': boolean;
  }
  interface AzFileExplorer {
    'caption': string;
    'rootDir': string;
  }
  interface AzIcon {
    'color': string;
    'height': number | string;
    'icon': string;
    'register': boolean;
    'width': number | string;
  }
  interface AzInput {
    'autocapitalize': string;
    'autocomplete': string;
    'autocorrect': string;
    'caption': string;
    'native': HTMLInputElement;
    'spellcheck': boolean;
    'type': string;
    'value': string;
  }
  interface AzMenuItem {
    'action': string;
    'caption': string;
    'icon': string;
  }
  interface AzPanel {
    'caption': string;
  }
  interface AzProgressBar {
    'caption': string;
    'max': number;
    'value': number;
  }
  interface AzSection {
    'caption': string;
    'collapsable': boolean;
    'collapsed': boolean;
  }
  interface AzSelect {}
  interface AzSlider {
    'caption': string;
    'max': string | number;
    'min': string | number;
    'value': string | number;
  }
  interface AzSplitter {
    'direction': 'horizontal' | 'vertical';
    'disabled': boolean;
    'gap': number;
  }
  interface AzSwitch {
    'caption': string;
    'size': ComponentSize;
    'type': ComponentStyle;
    'value': boolean;
  }
  interface AzTabs {
    'activeIndex': number;
    'items': any[];
  }
  interface AzToolbarButton {
    'caption': string;
    'icon': string;
    'type': ComponentStyle;
  }
  interface AzTooltip {
    'caption': string;
    'delay': number;
    'isShow': boolean;
    'placement': 'top' | 'bottom' | 'left' | 'right';
    'trigger': 'hover' | 'click' | 'manual';
  }
  interface AzTree {
    'addItem': (item: IAzTreeItem) => Promise<void>;
    'caption': string;
    'removeItem': (index: number) => Promise<void>;
    'selecting': boolean;
  }
  interface AzTreeItem {
    'addItem': (item: IAzTreeItem) => Promise<void>;
    'caption': string;
    'getItems': (index?: number) => Promise<HTMLAzTreeItemElement | NodeListOf<HTMLAzTreeItemElement>>;
    'icon': string;
    'removeItem': (index: number) => Promise<void>;
    'selected': false;
  }
}

declare global {


  interface HTMLAzButtonElement extends Components.AzButton, HTMLStencilElement {}
  var HTMLAzButtonElement: {
    prototype: HTMLAzButtonElement;
    new (): HTMLAzButtonElement;
  };

  interface HTMLAzCheckboxElement extends Components.AzCheckbox, HTMLStencilElement {}
  var HTMLAzCheckboxElement: {
    prototype: HTMLAzCheckboxElement;
    new (): HTMLAzCheckboxElement;
  };

  interface HTMLAzColorPickerElement extends Components.AzColorPicker, HTMLStencilElement {}
  var HTMLAzColorPickerElement: {
    prototype: HTMLAzColorPickerElement;
    new (): HTMLAzColorPickerElement;
  };

  interface HTMLAzContextMenuElement extends Components.AzContextMenu, HTMLStencilElement {}
  var HTMLAzContextMenuElement: {
    prototype: HTMLAzContextMenuElement;
    new (): HTMLAzContextMenuElement;
  };

  interface HTMLAzDialogElement extends Components.AzDialog, HTMLStencilElement {}
  var HTMLAzDialogElement: {
    prototype: HTMLAzDialogElement;
    new (): HTMLAzDialogElement;
  };

  interface HTMLAzFileExplorerElement extends Components.AzFileExplorer, HTMLStencilElement {}
  var HTMLAzFileExplorerElement: {
    prototype: HTMLAzFileExplorerElement;
    new (): HTMLAzFileExplorerElement;
  };

  interface HTMLAzIconElement extends Components.AzIcon, HTMLStencilElement {}
  var HTMLAzIconElement: {
    prototype: HTMLAzIconElement;
    new (): HTMLAzIconElement;
  };

  interface HTMLAzInputElement extends Components.AzInput, HTMLStencilElement {}
  var HTMLAzInputElement: {
    prototype: HTMLAzInputElement;
    new (): HTMLAzInputElement;
  };

  interface HTMLAzMenuItemElement extends Components.AzMenuItem, HTMLStencilElement {}
  var HTMLAzMenuItemElement: {
    prototype: HTMLAzMenuItemElement;
    new (): HTMLAzMenuItemElement;
  };

  interface HTMLAzPanelElement extends Components.AzPanel, HTMLStencilElement {}
  var HTMLAzPanelElement: {
    prototype: HTMLAzPanelElement;
    new (): HTMLAzPanelElement;
  };

  interface HTMLAzProgressBarElement extends Components.AzProgressBar, HTMLStencilElement {}
  var HTMLAzProgressBarElement: {
    prototype: HTMLAzProgressBarElement;
    new (): HTMLAzProgressBarElement;
  };

  interface HTMLAzSectionElement extends Components.AzSection, HTMLStencilElement {}
  var HTMLAzSectionElement: {
    prototype: HTMLAzSectionElement;
    new (): HTMLAzSectionElement;
  };

  interface HTMLAzSelectElement extends Components.AzSelect, HTMLStencilElement {}
  var HTMLAzSelectElement: {
    prototype: HTMLAzSelectElement;
    new (): HTMLAzSelectElement;
  };

  interface HTMLAzSliderElement extends Components.AzSlider, HTMLStencilElement {}
  var HTMLAzSliderElement: {
    prototype: HTMLAzSliderElement;
    new (): HTMLAzSliderElement;
  };

  interface HTMLAzSplitterElement extends Components.AzSplitter, HTMLStencilElement {}
  var HTMLAzSplitterElement: {
    prototype: HTMLAzSplitterElement;
    new (): HTMLAzSplitterElement;
  };

  interface HTMLAzSwitchElement extends Components.AzSwitch, HTMLStencilElement {}
  var HTMLAzSwitchElement: {
    prototype: HTMLAzSwitchElement;
    new (): HTMLAzSwitchElement;
  };

  interface HTMLAzTabsElement extends Components.AzTabs, HTMLStencilElement {}
  var HTMLAzTabsElement: {
    prototype: HTMLAzTabsElement;
    new (): HTMLAzTabsElement;
  };

  interface HTMLAzToolbarButtonElement extends Components.AzToolbarButton, HTMLStencilElement {}
  var HTMLAzToolbarButtonElement: {
    prototype: HTMLAzToolbarButtonElement;
    new (): HTMLAzToolbarButtonElement;
  };

  interface HTMLAzTooltipElement extends Components.AzTooltip, HTMLStencilElement {}
  var HTMLAzTooltipElement: {
    prototype: HTMLAzTooltipElement;
    new (): HTMLAzTooltipElement;
  };

  interface HTMLAzTreeElement extends Components.AzTree, HTMLStencilElement {}
  var HTMLAzTreeElement: {
    prototype: HTMLAzTreeElement;
    new (): HTMLAzTreeElement;
  };

  interface HTMLAzTreeItemElement extends Components.AzTreeItem, HTMLStencilElement {}
  var HTMLAzTreeItemElement: {
    prototype: HTMLAzTreeItemElement;
    new (): HTMLAzTreeItemElement;
  };
  interface HTMLElementTagNameMap {
    'az-button': HTMLAzButtonElement;
    'az-checkbox': HTMLAzCheckboxElement;
    'az-color-picker': HTMLAzColorPickerElement;
    'az-context-menu': HTMLAzContextMenuElement;
    'az-dialog': HTMLAzDialogElement;
    'az-file-explorer': HTMLAzFileExplorerElement;
    'az-icon': HTMLAzIconElement;
    'az-input': HTMLAzInputElement;
    'az-menu-item': HTMLAzMenuItemElement;
    'az-panel': HTMLAzPanelElement;
    'az-progress-bar': HTMLAzProgressBarElement;
    'az-section': HTMLAzSectionElement;
    'az-select': HTMLAzSelectElement;
    'az-slider': HTMLAzSliderElement;
    'az-splitter': HTMLAzSplitterElement;
    'az-switch': HTMLAzSwitchElement;
    'az-tabs': HTMLAzTabsElement;
    'az-toolbar-button': HTMLAzToolbarButtonElement;
    'az-tooltip': HTMLAzTooltipElement;
    'az-tree': HTMLAzTreeElement;
    'az-tree-item': HTMLAzTreeItemElement;
  }
}

declare namespace LocalJSX {
  interface AzButton {
    'caption'?: string;
    'circle'?: boolean;
    'disabled'?: boolean;
    'icon'?: string;
    'iconPosition'?: string;
    'round'?: boolean;
    'size'?: ComponentSize;
    /**
    * Button type
    */
    'type'?: ComponentStyle;
  }
  interface AzCheckbox {
    'caption'?: string;
    'checked'?: boolean;
    'indeterminate'?: boolean;
    'onChanged'?: (event: CustomEvent<any>) => void;
  }
  interface AzColorPicker {
    'caption'?: string;
    'color'?: string;
    'onChanged'?: (event: CustomEvent<any>) => void;
  }
  interface AzContextMenu {
    'caption'?: string;
  }
  interface AzDialog {
    'caption'?: string;
    'fixed'?: boolean;
    'onClosed'?: (event: CustomEvent<any>) => void;
  }
  interface AzFileExplorer {
    'caption'?: string;
    'rootDir'?: string;
  }
  interface AzIcon {
    'color'?: string;
    'height'?: number | string;
    'icon'?: string;
    'register'?: boolean;
    'width'?: number | string;
  }
  interface AzInput {
    'autocapitalize'?: string;
    'autocomplete'?: string;
    'autocorrect'?: string;
    'caption'?: string;
    'native'?: HTMLInputElement;
    'spellcheck'?: boolean;
    'type'?: string;
    'value'?: string;
  }
  interface AzMenuItem {
    'action'?: string;
    'caption'?: string;
    'icon'?: string;
    'onSelected'?: (event: CustomEvent<any>) => void;
  }
  interface AzPanel {
    'caption'?: string;
  }
  interface AzProgressBar {
    'caption'?: string;
    'max'?: number;
    'value'?: number;
  }
  interface AzSection {
    'caption'?: string;
    'collapsable'?: boolean;
    'collapsed'?: boolean;
  }
  interface AzSelect {}
  interface AzSlider {
    'caption'?: string;
    'max'?: string | number;
    'min'?: string | number;
    'value'?: string | number;
  }
  interface AzSplitter {
    'direction'?: 'horizontal' | 'vertical';
    'disabled'?: boolean;
    'gap'?: number;
  }
  interface AzSwitch {
    'caption'?: string;
    'onChanged'?: (event: CustomEvent<any>) => void;
    'size'?: ComponentSize;
    'type'?: ComponentStyle;
    'value'?: boolean;
  }
  interface AzTabs {
    'activeIndex'?: number;
    'items'?: any[];
  }
  interface AzToolbarButton {
    'caption'?: string;
    'icon'?: string;
    'type'?: ComponentStyle;
  }
  interface AzTooltip {
    'caption'?: string;
    'delay'?: number;
    'isShow'?: boolean;
    'placement'?: 'top' | 'bottom' | 'left' | 'right';
    'trigger'?: 'hover' | 'click' | 'manual';
  }
  interface AzTree {
    'caption'?: string;
    'onCollapsed'?: (event: CustomEvent<any>) => void;
    'onExpanded'?: (event: CustomEvent<any>) => void;
    'onInserted'?: (event: CustomEvent<any>) => void;
    'onSelected'?: (event: CustomEvent<any>) => void;
    'selecting'?: boolean;
  }
  interface AzTreeItem {
    'caption'?: string;
    'icon'?: string;
    'selected'?: false;
  }

  interface IntrinsicElements {
    'az-button': AzButton;
    'az-checkbox': AzCheckbox;
    'az-color-picker': AzColorPicker;
    'az-context-menu': AzContextMenu;
    'az-dialog': AzDialog;
    'az-file-explorer': AzFileExplorer;
    'az-icon': AzIcon;
    'az-input': AzInput;
    'az-menu-item': AzMenuItem;
    'az-panel': AzPanel;
    'az-progress-bar': AzProgressBar;
    'az-section': AzSection;
    'az-select': AzSelect;
    'az-slider': AzSlider;
    'az-splitter': AzSplitter;
    'az-switch': AzSwitch;
    'az-tabs': AzTabs;
    'az-toolbar-button': AzToolbarButton;
    'az-tooltip': AzTooltip;
    'az-tree': AzTree;
    'az-tree-item': AzTreeItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'az-button': LocalJSX.AzButton & JSXBase.HTMLAttributes<HTMLAzButtonElement>;
      'az-checkbox': LocalJSX.AzCheckbox & JSXBase.HTMLAttributes<HTMLAzCheckboxElement>;
      'az-color-picker': LocalJSX.AzColorPicker & JSXBase.HTMLAttributes<HTMLAzColorPickerElement>;
      'az-context-menu': LocalJSX.AzContextMenu & JSXBase.HTMLAttributes<HTMLAzContextMenuElement>;
      'az-dialog': LocalJSX.AzDialog & JSXBase.HTMLAttributes<HTMLAzDialogElement>;
      'az-file-explorer': LocalJSX.AzFileExplorer & JSXBase.HTMLAttributes<HTMLAzFileExplorerElement>;
      'az-icon': LocalJSX.AzIcon & JSXBase.HTMLAttributes<HTMLAzIconElement>;
      'az-input': LocalJSX.AzInput & JSXBase.HTMLAttributes<HTMLAzInputElement>;
      'az-menu-item': LocalJSX.AzMenuItem & JSXBase.HTMLAttributes<HTMLAzMenuItemElement>;
      'az-panel': LocalJSX.AzPanel & JSXBase.HTMLAttributes<HTMLAzPanelElement>;
      'az-progress-bar': LocalJSX.AzProgressBar & JSXBase.HTMLAttributes<HTMLAzProgressBarElement>;
      'az-section': LocalJSX.AzSection & JSXBase.HTMLAttributes<HTMLAzSectionElement>;
      'az-select': LocalJSX.AzSelect & JSXBase.HTMLAttributes<HTMLAzSelectElement>;
      'az-slider': LocalJSX.AzSlider & JSXBase.HTMLAttributes<HTMLAzSliderElement>;
      'az-splitter': LocalJSX.AzSplitter & JSXBase.HTMLAttributes<HTMLAzSplitterElement>;
      'az-switch': LocalJSX.AzSwitch & JSXBase.HTMLAttributes<HTMLAzSwitchElement>;
      'az-tabs': LocalJSX.AzTabs & JSXBase.HTMLAttributes<HTMLAzTabsElement>;
      'az-toolbar-button': LocalJSX.AzToolbarButton & JSXBase.HTMLAttributes<HTMLAzToolbarButtonElement>;
      'az-tooltip': LocalJSX.AzTooltip & JSXBase.HTMLAttributes<HTMLAzTooltipElement>;
      'az-tree': LocalJSX.AzTree & JSXBase.HTMLAttributes<HTMLAzTreeElement>;
      'az-tree-item': LocalJSX.AzTreeItem & JSXBase.HTMLAttributes<HTMLAzTreeItemElement>;
    }
  }
}


