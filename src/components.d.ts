/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ComponentSize,
  ComponentStyle,
} from './global/typing';
import {
  AzTreeItem,
} from './components/tree/az-tree-item';

export namespace Components {
  interface AzButton {
    'caption': string;
    'circle': boolean;
    'disabled': boolean;
    'icon': string;
    'iconPosition': string;
    'round': boolean;
    'size': ComponentSize;
    /**
    * Button type
    */
    'type': ComponentStyle;
  }
  interface AzCheckbox {
    'caption': string;
    'checked': boolean;
    'indeterminate': boolean;
  }
  interface AzColorPicker {
    'caption': string;
    'color': string;
  }
  interface AzDialog {
    'caption': string;
    'fixed': boolean;
  }
  interface AzIcon {
    'color': string;
    'height': number | string;
    'icon': string;
    'register': boolean;
    'width': number | string;
  }
  interface AzInput {
    'autocapitalize': string;
    'autocomplete': string;
    'autocorrect': string;
    'caption': string;
    'native': HTMLInputElement;
    'spellcheck': boolean;
    'type': string;
    'value': string;
  }
  interface AzPanel {
    'caption': string;
  }
  interface AzProgressBar {
    'caption': string;
    'max': number;
    'value': number;
  }
  interface AzSection {
    'caption': string;
    'collapsable': boolean;
    'collapsed': boolean;
  }
  interface AzSelect {}
  interface AzSlider {
    'caption': string;
    'max': string | number;
    'min': string | number;
    'value': string | number;
  }
  interface AzSwitch {
    'caption': string;
    'size': ComponentSize;
    'type': ComponentStyle;
    'value': boolean;
  }
  interface AzTabs {
    'activeIndex': number;
    'items': any[];
  }
  interface AzToolbarButton {
    'caption': string;
    'icon': string;
    'type': ComponentStyle;
  }
  interface AzTooltip {
    'caption': string;
    'delay': number;
    'isShow': boolean;
    'placement': 'top' | 'bottom' | 'left' | 'right';
    'trigger': 'hover' | 'click' | 'manual';
  }
  interface AzTree {
    'addItem': (itemOrCaption: string | AzTreeItem, parent?: number | AzTreeItem, attrs?: any) => Promise<AzTreeItem>;
    'caption': string;
    'roots': AzTreeItem[];
    'selecting': boolean;
  }
}

declare global {


  interface HTMLAzButtonElement extends Components.AzButton, HTMLStencilElement {}
  var HTMLAzButtonElement: {
    prototype: HTMLAzButtonElement;
    new (): HTMLAzButtonElement;
  };

  interface HTMLAzCheckboxElement extends Components.AzCheckbox, HTMLStencilElement {}
  var HTMLAzCheckboxElement: {
    prototype: HTMLAzCheckboxElement;
    new (): HTMLAzCheckboxElement;
  };

  interface HTMLAzColorPickerElement extends Components.AzColorPicker, HTMLStencilElement {}
  var HTMLAzColorPickerElement: {
    prototype: HTMLAzColorPickerElement;
    new (): HTMLAzColorPickerElement;
  };

  interface HTMLAzDialogElement extends Components.AzDialog, HTMLStencilElement {}
  var HTMLAzDialogElement: {
    prototype: HTMLAzDialogElement;
    new (): HTMLAzDialogElement;
  };

  interface HTMLAzIconElement extends Components.AzIcon, HTMLStencilElement {}
  var HTMLAzIconElement: {
    prototype: HTMLAzIconElement;
    new (): HTMLAzIconElement;
  };

  interface HTMLAzInputElement extends Components.AzInput, HTMLStencilElement {}
  var HTMLAzInputElement: {
    prototype: HTMLAzInputElement;
    new (): HTMLAzInputElement;
  };

  interface HTMLAzPanelElement extends Components.AzPanel, HTMLStencilElement {}
  var HTMLAzPanelElement: {
    prototype: HTMLAzPanelElement;
    new (): HTMLAzPanelElement;
  };

  interface HTMLAzProgressBarElement extends Components.AzProgressBar, HTMLStencilElement {}
  var HTMLAzProgressBarElement: {
    prototype: HTMLAzProgressBarElement;
    new (): HTMLAzProgressBarElement;
  };

  interface HTMLAzSectionElement extends Components.AzSection, HTMLStencilElement {}
  var HTMLAzSectionElement: {
    prototype: HTMLAzSectionElement;
    new (): HTMLAzSectionElement;
  };

  interface HTMLAzSelectElement extends Components.AzSelect, HTMLStencilElement {}
  var HTMLAzSelectElement: {
    prototype: HTMLAzSelectElement;
    new (): HTMLAzSelectElement;
  };

  interface HTMLAzSliderElement extends Components.AzSlider, HTMLStencilElement {}
  var HTMLAzSliderElement: {
    prototype: HTMLAzSliderElement;
    new (): HTMLAzSliderElement;
  };

  interface HTMLAzSwitchElement extends Components.AzSwitch, HTMLStencilElement {}
  var HTMLAzSwitchElement: {
    prototype: HTMLAzSwitchElement;
    new (): HTMLAzSwitchElement;
  };

  interface HTMLAzTabsElement extends Components.AzTabs, HTMLStencilElement {}
  var HTMLAzTabsElement: {
    prototype: HTMLAzTabsElement;
    new (): HTMLAzTabsElement;
  };

  interface HTMLAzToolbarButtonElement extends Components.AzToolbarButton, HTMLStencilElement {}
  var HTMLAzToolbarButtonElement: {
    prototype: HTMLAzToolbarButtonElement;
    new (): HTMLAzToolbarButtonElement;
  };

  interface HTMLAzTooltipElement extends Components.AzTooltip, HTMLStencilElement {}
  var HTMLAzTooltipElement: {
    prototype: HTMLAzTooltipElement;
    new (): HTMLAzTooltipElement;
  };

  interface HTMLAzTreeElement extends Components.AzTree, HTMLStencilElement {}
  var HTMLAzTreeElement: {
    prototype: HTMLAzTreeElement;
    new (): HTMLAzTreeElement;
  };
  interface HTMLElementTagNameMap {
    'az-button': HTMLAzButtonElement;
    'az-checkbox': HTMLAzCheckboxElement;
    'az-color-picker': HTMLAzColorPickerElement;
    'az-dialog': HTMLAzDialogElement;
    'az-icon': HTMLAzIconElement;
    'az-input': HTMLAzInputElement;
    'az-panel': HTMLAzPanelElement;
    'az-progress-bar': HTMLAzProgressBarElement;
    'az-section': HTMLAzSectionElement;
    'az-select': HTMLAzSelectElement;
    'az-slider': HTMLAzSliderElement;
    'az-switch': HTMLAzSwitchElement;
    'az-tabs': HTMLAzTabsElement;
    'az-toolbar-button': HTMLAzToolbarButtonElement;
    'az-tooltip': HTMLAzTooltipElement;
    'az-tree': HTMLAzTreeElement;
  }
}

declare namespace LocalJSX {
  interface AzButton extends JSXBase.HTMLAttributes<HTMLAzButtonElement> {
    'caption'?: string;
    'circle'?: boolean;
    'disabled'?: boolean;
    'icon'?: string;
    'iconPosition'?: string;
    'round'?: boolean;
    'size'?: ComponentSize;
    /**
    * Button type
    */
    'type'?: ComponentStyle;
  }
  interface AzCheckbox extends JSXBase.HTMLAttributes<HTMLAzCheckboxElement> {
    'caption'?: string;
    'checked'?: boolean;
    'indeterminate'?: boolean;
    'onChanged'?: (event: CustomEvent<any>) => void;
  }
  interface AzColorPicker extends JSXBase.HTMLAttributes<HTMLAzColorPickerElement> {
    'caption'?: string;
    'color'?: string;
    'onChanged'?: (event: CustomEvent<any>) => void;
  }
  interface AzDialog extends JSXBase.HTMLAttributes<HTMLAzDialogElement> {
    'caption'?: string;
    'fixed'?: boolean;
    'onClosed'?: (event: CustomEvent<any>) => void;
  }
  interface AzIcon extends JSXBase.HTMLAttributes<HTMLAzIconElement> {
    'color'?: string;
    'height'?: number | string;
    'icon'?: string;
    'register'?: boolean;
    'width'?: number | string;
  }
  interface AzInput extends JSXBase.HTMLAttributes<HTMLAzInputElement> {
    'autocapitalize'?: string;
    'autocomplete'?: string;
    'autocorrect'?: string;
    'caption'?: string;
    'native'?: HTMLInputElement;
    'spellcheck'?: boolean;
    'type'?: string;
    'value'?: string;
  }
  interface AzPanel extends JSXBase.HTMLAttributes<HTMLAzPanelElement> {
    'caption'?: string;
  }
  interface AzProgressBar extends JSXBase.HTMLAttributes<HTMLAzProgressBarElement> {
    'caption'?: string;
    'max'?: number;
    'value'?: number;
  }
  interface AzSection extends JSXBase.HTMLAttributes<HTMLAzSectionElement> {
    'caption'?: string;
    'collapsable'?: boolean;
    'collapsed'?: boolean;
  }
  interface AzSelect extends JSXBase.HTMLAttributes<HTMLAzSelectElement> {}
  interface AzSlider extends JSXBase.HTMLAttributes<HTMLAzSliderElement> {
    'caption'?: string;
    'max'?: string | number;
    'min'?: string | number;
    'value'?: string | number;
  }
  interface AzSwitch extends JSXBase.HTMLAttributes<HTMLAzSwitchElement> {
    'caption'?: string;
    'onChanged'?: (event: CustomEvent<any>) => void;
    'size'?: ComponentSize;
    'type'?: ComponentStyle;
    'value'?: boolean;
  }
  interface AzTabs extends JSXBase.HTMLAttributes<HTMLAzTabsElement> {
    'activeIndex'?: number;
    'items'?: any[];
  }
  interface AzToolbarButton extends JSXBase.HTMLAttributes<HTMLAzToolbarButtonElement> {
    'caption'?: string;
    'icon'?: string;
    'type'?: ComponentStyle;
  }
  interface AzTooltip extends JSXBase.HTMLAttributes<HTMLAzTooltipElement> {
    'caption'?: string;
    'delay'?: number;
    'isShow'?: boolean;
    'placement'?: 'top' | 'bottom' | 'left' | 'right';
    'trigger'?: 'hover' | 'click' | 'manual';
  }
  interface AzTree extends JSXBase.HTMLAttributes<HTMLAzTreeElement> {
    'caption'?: string;
    'onCollapsed'?: (event: CustomEvent<any>) => void;
    'onExpanded'?: (event: CustomEvent<any>) => void;
    'onInserted'?: (event: CustomEvent<any>) => void;
    'onSelected'?: (event: CustomEvent<any>) => void;
    'roots'?: AzTreeItem[];
    'selecting'?: boolean;
  }

  interface IntrinsicElements {
    'az-button': AzButton;
    'az-checkbox': AzCheckbox;
    'az-color-picker': AzColorPicker;
    'az-dialog': AzDialog;
    'az-icon': AzIcon;
    'az-input': AzInput;
    'az-panel': AzPanel;
    'az-progress-bar': AzProgressBar;
    'az-section': AzSection;
    'az-select': AzSelect;
    'az-slider': AzSlider;
    'az-switch': AzSwitch;
    'az-tabs': AzTabs;
    'az-toolbar-button': AzToolbarButton;
    'az-tooltip': AzTooltip;
    'az-tree': AzTree;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


